//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "monitorings")]
pub struct Model {
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    #[sea_orm(primary_key)]
    pub id: i32,
    pub users_id: i32,
    pub name_monitoring: Option<String>,
    pub code_device: Option<String>,
    pub limitation_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::limitations::Entity",
        from = "Column::LimitationId",
        to = "super::limitations::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Limitations,
    #[sea_orm(has_many = "super::monitoring_data::Entity")]
    MonitoringData,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UsersId",
        to = "super::users::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::limitations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Limitations.def()
    }
}

impl Related<super::monitoring_data::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MonitoringData.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}
